# bot.py

import logging
import requests
import schedule
import time
import asyncio
from datetime import datetime
from telegram import Bot
from config import TELEGRAM_TOKEN, CHANNEL_ID, OPENAI_API_KEY

import sys
logging.basicConfig(
    format='%(asctime)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
    )
bot = Bot(token=TELEGRAM_TOKEN)

def get_ai_news():
    today = datetime.now().strftime("%d.%m.%Y")
    logging.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –¥–∞—Ç—É: {today}")

    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –º–∏—Ä–∞ –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (AI, –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –∫–æ—Å–º–æ—Å, –º–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Ç.–ø.) "
        f"–∑–∞ {today}. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 10 —Å–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ, "
        f"–≤—ã–¥–µ–ª–∏ –µ–≥–æ –∂–∏—Ä–Ω—ã–º HTML-—Ç–µ–≥–æ–º <b>. –ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏ —Å–∞–º—É –Ω–æ–≤–æ—Å—Ç—å: 4‚Äì9 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –ø–æ —Ç–µ–º–µ. "
        f"–ü–∏—à–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ. –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É: '–ò—Å—Ç–æ—á–Ω–∏–∫: [—Ä–µ–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞]'."
    )

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.9
    }

    try:
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        response.encoding = 'utf-8'
        result = response.json()
        text = result["choices"][0]["message"]["content"]
        text = text.replace("<h2>", "<b>").replace("</h2>", "</b>")
        return text
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return None

def generate_dalle_image(prompt):
    logging.info(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ: {prompt}")
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    json_data = {
        "model": "dall-e-3",
        "prompt": prompt,
        "n": 1,
        "size": "1024x1024"
    }
    try:
        response = requests.post("https://api.openai.com/v1/images/generations", headers=headers, json=json_data)
        result = response.json()
        return result["data"][0]["url"]
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def post_news():
    news = get_ai_news()
    if not news:
        return

    first_line = news.splitlines()[0]
    query = " ".join(first_line.strip("‚≠êüî•üöÄüåçüß¨‚ö°üß†").split()[1:5])

    image_url = generate_dalle_image(query)

    try:
        if image_url:
            await bot.send_photo(chat_id=CHANNEL_ID, photo=image_url, caption=news, parse_mode="HTML")
            print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
        else:
            await bot.send_message(chat_id=CHANNEL_ID, text=news, parse_mode="HTML")
            logging.info("‚úÖ –ù–æ–≤–æ—Å—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")

def scheduled_post():
    asyncio.run(post_news())

schedule.every().day.at("08:00").do(scheduled_post)
schedule.every().day.at("18:00").do(scheduled_post)

# –†–∞–∑–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    asyncio.run(post_news())
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –û–∂–∏–¥–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
while True:
    schedule.run_pending()
    time.sleep(30)
